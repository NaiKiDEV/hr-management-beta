// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum HolidayRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum JobTitle {
  SOFTWARE_ENGINEER
  FRONTEND_ENGINEER
  HR
  TECH_LEAD
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Auth relations
  accounts    Account[]
  sessions    Session[]
  UserProfile UserProfile[]
}

model UserProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  email            String   @unique
  name             String
  surname          String
  title            JobTitle @default(SOFTWARE_ENGINEER)
  start_date       DateTime @default(now())
  holidayDayAmount Float    @default(0)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Direct Relations
  reportToUserProfileId String?      @unique @db.ObjectId
  reportsTo             UserProfile? @relation("reportsToUser", fields: [reportToUserProfileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Contained by other foreign keys
  reporters               UserProfile[]    @relation("reportsToUser")
  holidayRequests         HolidayRequest[] @relation("userRequestsHolidays")
  approvedHolidayRequests HolidayRequest[] @relation("userApprovesHolidayRequest")
}

model HolidayRequest {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  days        DateTime[]
  status      HolidayRequestStatus @default(PENDING)
  requestDate DateTime             @default(now())

  userProfileId String      @db.ObjectId
  userProfile   UserProfile @relation("userRequestsHolidays", fields: [userProfileId], references: [id])

  approvedUserProfileId String?      @db.ObjectId
  approvedBy            UserProfile? @relation("userApprovesHolidayRequest", fields: [approvedUserProfileId], references: [id])
}
